@using Tewr.Blazor.FileReader
@using Alfred.Client.Dtos.Highlights
@using Alfred.Client.Dtos.Events
@implements IDisposable
@inject IFileReaderService FileReader
@inject IHighlightRepository HighlightRepo


<RadzenTemplateForm Data="@_highlight" Submit="@(async (DataForAddingHighlightDto args) => { await Submit(args); })">
    <div class="row">
        <div class="col-md-12">
            <RadzenFieldset Text="Data">
                <div class="row">
                    <div class="col-md-3 align-items-center d-flex">
                        <RadzenLabel Text="Name"/>
                    </div>
                    <div class="col-md-9">
                        <RadzenTextBox style="width: 100%;" @bind-value="_highlight.Name"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 align-items-center d-flex">
                        <RadzenLabel Text="Image"/>
                    </div>
                    <div class="col-md-9">
                        <ImageInput File="@_highlight.Image" />
                    </div>
                </div>

            </RadzenFieldset>
            <div class="row justify-content-center">
                <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                    <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save"/>
                    <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel"/>
                </div>
            </div>
        </div>
    </div>

</RadzenTemplateForm>

@if (_loading)
{
    <div class="spinner"></div>
}

<style>
    .row{
        margin-top: 10px;
    }
</style>

@code{
    DataForAddingHighlightDto _highlight = new DataForAddingHighlightDto();
    bool _loading = false;

    protected override void OnInitialized()
    {
        _highlight.Image = new CustomFile();
    }


    async Task Submit(DataForAddingHighlightDto newHighlight)
    {
        _loading = true;
        await HighlightRepo.AddHighlight(newHighlight);
        Cancel();
        _loading = false;
    }

    void Cancel()
    {
        _highlight.Image?.Data?.Dispose();
        _highlight = new DataForAddingHighlightDto();
        _highlight.Image = new CustomFile();
        Dialog.Close();
    }

    public void Dispose()
    {
        _highlight.Image?.Data?.Dispose();
    }

}