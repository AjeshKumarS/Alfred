@using Alfred.Client.Dtos.Accounts
@inject IUserRepository UserRepo

<div class="row">
    <div class="col-md-10">
        <RadzenTextBox Placeholder="Excel-Id or Email"  @onkeyup="@(async(KeyboardEventArgs args) => await KeyUp(args))" @bind-value="@_searchValue" Style="width: 100%"/>
    </div>
    <div class="col-md-2">
        <RadzenButton Icon="search" style="width: 100%" Click="Search"/>
    </div>
</div>

@if (_candidates.Any())
{
    <div class="row">
        <div class="col-md-12">
            <RadzenPanel>
                <ChildContent>
                    <RadzenDataList PageSize="1" WrapItems="true" AllowPaging="true"
                                    Data="@_candidates" TItem="UserForListViewDto">
                        <Template Context="candidate">
                            <UserCard User="@candidate"/>
                            <div class="row">
                                <div class="col-md-6 text-center">
                                    <RadzenButton Icon="person_add" Click="@(() => Submit(candidate))" Text="Add User"/>
                                </div>
                                <div class="col-md-6 text-center">
                                    <RadzenButton Icon="close" Click="Cancel" Text="Cancel"/>
                                </div>
                            </div>
                        </Template>
                    </RadzenDataList>
                </ChildContent>
            </RadzenPanel>
        </div>
    </div>
}

@if (_loading)
{
    <div class="spinner"></div>
}

<style>
    .row{
        margin-top: 10px;
    }
</style>

@code{
    List<UserForListViewDto> _candidates;
    bool _loading = false;
    public string _searchValue;

    async Task Submit(UserForListViewDto candidate)
    {
        _loading = true;
        if (candidate.Role == "User")
        {
            var dataForUpdatingRole = new DataForUpdatingRoleDto()
            {
                Id = candidate.Id,
                Role = "User,Staff"
            };
            try
            {
                var newStaff = await UserRepo.UpdateRole(dataForUpdatingRole);
                var staffList = await State.StaffList();
                staffList.Add(newStaff);
                State.StateChanged.Invoke();
            }
            catch
            {
                Notification.Error("Something went Wrong");
            }
            Cancel();
        }
        else
        {
            Notification.Info("Candidate Already a staff, Contact Admin for further details");
        }
        _loading = false;
    }

    protected override void OnInitialized()
    {
        _candidates = new List<UserForListViewDto>();
    }

    void Cancel()
    {
        Dialog.Close();
    }

    async Task Search()
    {
        _loading = true;
        int id;
        var query = new GetUserQueryParams();
        if (Int32.TryParse(_searchValue, out id))
        {
            query.Id = id;
        }
        else
        {
            query.Email = _searchValue;
        }
        _candidates = await UserRepo.GetUsers(query);
        _loading = false;
    }

    async Task KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }

}