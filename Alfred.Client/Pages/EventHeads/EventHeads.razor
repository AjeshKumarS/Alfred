@page "/Events/EventHeads"
@inject IApiService ApiService
@inject NotificationService Notification
@inject DialogService Dialog
@using Alfred.Client.Dtos.Events
@using Alfred.Client.Services.Interfaces
@using System.Text.Json
@using System.Text
@using Alfred.Client.Pages.EventHeads.Components

<div class="row">
    <div class="col-md-12 text-right mb-2">
        <RadzenButton Text="Add Event Head" Click="@(args => Dialog.Open<AddEventHead>("Add Event Head", null, new DialogOptions() {Width = "700px"}))"/>
        <RadzenButton Click="@(async () => await Refresh())" Icon="cached" Style="margin-bottom: 20px; width: 80px"/>
    </div>
</div>


<RadzenGrid @ref="@_eventHeadGrid" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="8" AllowSorting="true" Data="_eventHeads" TItem="EventHead" EditMode="DataGridEditMode.Single" RowUpdate="@(async (EventHead evehtHead) => await OnUpdateRow(evehtHead))">
    <Columns>
        <RadzenGridColumn TItem="EventHead" Property="Id" Title="Id"/>
        <RadzenGridColumn TItem="EventHead" Property="Name" Title="Name">
            <EditTemplate Context="eventHead">
                <RadzenTextBox style="width: 100%;" @bind-value="eventHead.Name"/>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="EventHead" Property="Email" Title="Email">
            <EditTemplate Context="eventHead">
                <RadzenTextBox style="width: 100%;" @bind-value="eventHead.Email"/>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="EventHead" Property="PhoneNumber" Title="Phone">
            <EditTemplate Context="eventHead">
                <RadzenTextBox style="width: 100%;" @bind-value="eventHead.PhoneNumber"/>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="EventHead" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
            <Template Context="eventHead">
                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(eventHead))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="eventHead">
                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(eventHead))">
                </RadzenButton>
                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(eventHead))">
                </RadzenButton>
            </EditTemplate>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="EventHead" Context="eventHead" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
            <Template Context="eventHead">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => ShowConfirmDialogue(eventHead))">
                </RadzenButton>
            </Template>
            <EditTemplate Context="eventHead">
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => ShowConfirmDialogue(eventHead))">
                </RadzenButton>
            </EditTemplate>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>

@if (_loading)
{
    <div class="spinner"></div>
}

@code{
    bool _loading;
    List<EventHead> _eventHeads = new List<EventHead>();
    RadzenGrid<EventHead> _eventHeadGrid;
    string _url = "/events/api/eventHead";
    EventHead _editing;

    async Task Refresh()
    {
        _loading = true;
        var client = await ApiService.Client();
        _eventHeads = await client.GetFromJsonAsync<List<EventHead>>(_url);
        client.Dispose();
        _loading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    async Task OnUpdateRow(EventHead eventHead)
    {
        _loading = true;
        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Put,
            RequestUri = new Uri(_url),
            Content = new StringContent(JsonSerializer.Serialize(eventHead), Encoding.UTF8, "application/json")
        };
        var client = await ApiService.Client();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "Successfully Updated",
                Duration = 4000
            };
            Notification.Notify(message);
        }
        _loading = false;
    }

    void SaveRow(EventHead eventHead)
    {
        _eventHeadGrid.UpdateRow(eventHead);
    }

    void EditRow(EventHead eventHead)
    {
        _editing = (EventHead) eventHead.Clone();
        _eventHeadGrid.EditRow(eventHead);
    }

    void CancelEdit(EventHead eventHead)
    {
        eventHead.Set(_editing);
        _eventHeadGrid.CancelEditRow(eventHead);
    }

    async Task DeleteRow(EventHead eventHead, DialogService ds)
    {
        ds.Close(true);
        _loading = true;
        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Delete,
            RequestUri = new Uri(_url),
            Content = new StringContent(JsonSerializer.Serialize(eventHead), Encoding.UTF8, "application/json")
        };
        var client = await ApiService.Client();
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = "Successfully Deleted",
                Duration = 4000
            };
            Notification.Notify(message);
        }
        _loading = false;
        await Refresh();
    }

    async Task ShowConfirmDialogue(EventHead eventHead) => await Dialog.OpenAsync("Alert", ds =>
        @<RadzenCard Style="padding: 20px;">
            <p Style="margin-bottom: 10px;">Are you sure you want to delete?</p>
            <div class="row">
                <div class="col-md-12">
                    <RadzenButton Text="Ok" Click="async () => await DeleteRow(eventHead, ds)" Style="margin-bottom: 10px; width: 150px"/>
                    <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px"/>
                </div>
            </div>
        </RadzenCard>);

}