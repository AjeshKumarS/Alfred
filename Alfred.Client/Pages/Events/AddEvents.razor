@page "/Events/Add"
@using Alfred.Client.Dtos.Events
@using Alfred.Client.Pages.Events.Components
@inject IEventRepository EventRepo


<AuthorizedView Role=@($"{Roles.Admin},{Roles.Core},{Roles.Editor}")>
    <RadzenTemplateForm Data="@_newEvent" Submit="@(async (DataForAddingEventDto args) => { await Submit(args); })">
        <div class="row">
            <div class="col-md-12 mb-2">
                <a href=@($"/Events/")>
                    <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="navigate_before" Text="Back"/>
                </a>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <EventInfo Event="@_newEvent"/>
            </div>
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-12">
                        <Schedule Event="@_newEvent"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <MoreDetails Event="@_newEvent" EventHeads="@_eventHeads"/>
                    </div>
                </div>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save"/>
                <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel"/>
            </div>
        </div>
    </RadzenTemplateForm>

    @if (_loading)
    {
        <div class="spinner"></div>
    }
</AuthorizedView>
<style>
    .row{
        margin-top: 10px;
    }
    .file{
        font-size: 15px;
    }
    .bool{
        margin-right: 5px;
    }
</style>

@code{
    DataForAddingEventDto _newEvent = new DataForAddingEventDto();
    bool _loading = false;
    List<EventHead> _eventHeads;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        _eventHeads = await State.GetEventHeads();
        _loading = false;
    }


    void Cancel()
    {
        _newEvent.Icon.Data?.Dispose();
        _newEvent = new DataForAddingEventDto();
    }


    async Task Submit(DataForAddingEventDto newEvent)
    {
        _loading = true;
        _newEvent = await EventRepo.AddEvent(newEvent);
        _loading = false;
    }

}