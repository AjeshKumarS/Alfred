@page "/Events"
@using Alfred.Client.Dtos.Events
@inject IJSRuntime JsRuntime

<AuthorizedView Roles="Admin">
    <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10"
                AllowSorting="true" Data="@_events" TItem="EventForListViewDto" ColumnWidth="200px">
        <Columns>
            <RadzenGridColumn TItem="EventForListViewDto" Property="Id" Title="Id" />
            <RadzenGridColumn TItem="EventForListViewDto" Property="Name" Title="Name" />
            <RadzenGridColumn TItem="EventForListViewDto" Property="Icon" Title="Icon" />
            <RadzenGridColumn TItem="EventForListViewDto" Property="EventType" Title="Event Type" />
            <RadzenGridColumn TItem="EventForListViewDto" Property="Category" Title="Category" />
            <RadzenGridColumn TItem="EventForListViewDto" Property="NeedRegistration" Title="Need Registration" />
            <RadzenGridColumn TItem="EventForListViewDto" Property="Day" Title="Day" />
            <RadzenGridColumn TItem="EventForListViewDto" Property="Datetime" Title="DateTime" />
        </Columns>
    </RadzenGrid>
</AuthorizedView>
@code {
    List<EventForListViewDto> _events = new List<EventForListViewDto>();
    protected override async Task OnInitializedAsync()
    {
        _events = await JsRuntime.InvokeAsync<List<EventForListViewDto>>("customFetch", "https://staging.apis.excelmec.org/events/api/events");
        foreach (var item in _events)
        {
            Console.WriteLine(item.Name);
        }
    }

}


