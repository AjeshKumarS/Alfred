@using System.IO
@using Alfred.Client.Models.Components
@using Tewr.Blazor.FileReader
@inject IFileReaderService FileReader
@inject NotificationService Notification

<input type="file" @ref="_inputReference" @onchange="async () => await OpenFileAsync()"/>

@code{

    [Parameter]
    public CustomFile File { get; set; }

    private ElementReference _inputReference;

    async Task OpenFileAsync()
    {
        var file = (await FileReader.CreateReference(_inputReference).EnumerateFilesAsync()).FirstOrDefault();

        if (file == null)
            return;

        var fileInfo = await file.ReadFileInfoAsync();
        if (fileInfo.Size > 1024000)
        {
            var message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Warning",
                Detail = "File should be less than 1MB",
                Duration = 4000
            };
            Notification.Notify(message);
        }
        if (fileInfo.Type.Split("/").First() != "image")
        {
            var message = new NotificationMessage()
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Warning",
                Detail = "File should be an image",
                Duration = 4000
            };
            Notification.Notify(message);
        }
        File.Name = fileInfo.Name;
        File.Size = $"{fileInfo.Size}b";
        File.Type = fileInfo.Type;

        using (var ms = await file.CreateMemoryStreamAsync((int) fileInfo.Size))
        {
            File.Data = new MemoryStream(ms.ToArray());
        }
    }

}